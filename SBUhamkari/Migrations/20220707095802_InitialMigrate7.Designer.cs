// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace SBUhamkari.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220707095802_InitialMigrate7")]
    partial class InitialMigrate7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Models.Models.CoAnnouncement", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Creatorguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("guid");

                    b.HasIndex("Creatorguid");

                    b.HasIndex("Projectguid");

                    b.ToTable("CoAnnouncements");
                });

            modelBuilder.Entity("Models.Models.CoApplication", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Applicantguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CV")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("CoAnnouncementguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("guid");

                    b.HasIndex("Applicantguid");

                    b.HasIndex("CoAnnouncementguid");

                    b.ToTable("CoApplications");
                });

            modelBuilder.Entity("Models.Models.ContactInfo", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("guid");

                    b.HasIndex("Userguid");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("Models.Models.EducationInstitute", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("guid");

                    b.ToTable("EducationInstitutes");
                });

            modelBuilder.Entity("Models.Models.EducationRecord", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Degree")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EducationInstituteguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EducationState")
                        .HasColumnType("int");

                    b.Property<Guid>("Personguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("guid");

                    b.HasIndex("EducationInstituteguid");

                    b.HasIndex("Personguid");

                    b.ToTable("EducationRecords");
                });

            modelBuilder.Entity("Models.Models.Faculty", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationInstituteguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("guid");

                    b.HasIndex("EducationInstituteguid");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("Models.Models.Feedback", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("guid");

                    b.HasIndex("Projectguid");

                    b.HasIndex("Userguid");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Models.Models.Gooz", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.HasKey("guid");

                    b.ToTable("Goozs");
                });

            modelBuilder.Entity("Models.Models.News", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("guid");

                    b.HasIndex("Userguid");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Models.Models.Notification", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("NotifText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifTittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Recieverguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Senderguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("guid");

                    b.HasIndex("Recieverguid");

                    b.HasIndex("Senderguid");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Models.Models.Project", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectExplain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectState")
                        .HasColumnType("int");

                    b.HasKey("guid");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Models.Models.ProjectFile", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("guid");

                    b.HasIndex("Projectguid");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("Models.Models.ProjectManager", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("guid");

                    b.HasIndex("Projectguid");

                    b.HasIndex("Userguid");

                    b.ToTable("ProjectManagers");
                });

            modelBuilder.Entity("Models.Models.SavedProject", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("guid");

                    b.HasIndex("Projectguid");

                    b.HasIndex("Userguid");

                    b.ToTable("SavedProject");
                });

            modelBuilder.Entity("Models.Models.Skill", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<string>("SkillTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("guid");

                    b.HasIndex("Userguid");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Models.Models.TAapplication", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Resume")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("Studentguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Tarequestguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("guid");

                    b.HasIndex("Studentguid");

                    b.HasIndex("Tarequestguid");

                    b.ToTable("TAapplications");
                });

            modelBuilder.Entity("Models.Models.TArequest", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Professorguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("guid");

                    b.HasIndex("Professorguid");

                    b.ToTable("TArequests");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Avatar")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("Companyguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Facultyguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Userguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("guid");

                    b.HasIndex("Companyguid");

                    b.HasIndex("Facultyguid");

                    b.HasIndex("Userguid");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Models.Models.WorkField", b =>
                {
                    b.Property<Guid>("guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Projectguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("guid");

                    b.HasIndex("Projectguid");

                    b.HasIndex("Userguid");

                    b.ToTable("WorkFields");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectParticipantsguid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("projectsguid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectParticipantsguid", "projectsguid");

                    b.HasIndex("projectsguid");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Models.Models.Company", b =>
                {
                    b.HasBaseType("Models.Models.User");

                    b.Property<int>("CompanyID")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Models.Models.Person", b =>
                {
                    b.HasBaseType("Models.Models.User");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("CV")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("NationalIdNum")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Models.Models.Professor", b =>
                {
                    b.HasBaseType("Models.Models.Person");

                    b.Property<int>("PersonnelID")
                        .HasMaxLength(8)
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("Models.Models.Student", b =>
                {
                    b.HasBaseType("Models.Models.Person");

                    b.Property<int>("StudentID")
                        .HasMaxLength(8)
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Models.Models.CoAnnouncement", b =>
                {
                    b.HasOne("Models.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("Creatorguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Projectguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Models.Models.CoApplication", b =>
                {
                    b.HasOne("Models.Models.Person", "Applicant")
                        .WithMany("coApplications")
                        .HasForeignKey("Applicantguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.CoAnnouncement", "CoAnnouncement")
                        .WithMany()
                        .HasForeignKey("CoAnnouncementguid");

                    b.Navigation("Applicant");

                    b.Navigation("CoAnnouncement");
                });

            modelBuilder.Entity("Models.Models.ContactInfo", b =>
                {
                    b.HasOne("Models.Models.User", "User")
                        .WithMany("contactInfos")
                        .HasForeignKey("Userguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.EducationRecord", b =>
                {
                    b.HasOne("Models.Models.EducationInstitute", "EducationInstitute")
                        .WithMany("EducationRecords")
                        .HasForeignKey("EducationInstituteguid");

                    b.HasOne("Models.Models.Person", "Person")
                        .WithMany("EducationRecords")
                        .HasForeignKey("Personguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationInstitute");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Models.Models.Faculty", b =>
                {
                    b.HasOne("Models.Models.EducationInstitute", "EducationInstitute")
                        .WithMany()
                        .HasForeignKey("EducationInstituteguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationInstitute");
                });

            modelBuilder.Entity("Models.Models.Feedback", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Projectguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("feedbacks")
                        .HasForeignKey("Userguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.News", b =>
                {
                    b.HasOne("Models.Models.User", "User")
                        .WithMany("news")
                        .HasForeignKey("Userguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Notification", b =>
                {
                    b.HasOne("Models.Models.User", "Reciever")
                        .WithMany("notifications")
                        .HasForeignKey("Recieverguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Project", "Sender")
                        .WithMany("Notifications")
                        .HasForeignKey("Senderguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Models.Models.ProjectFile", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("Filess")
                        .HasForeignKey("Projectguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Models.Models.ProjectManager", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectManagers")
                        .HasForeignKey("Projectguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Userguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.SavedProject", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Projectguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("SavedProjects")
                        .HasForeignKey("Userguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Skill", b =>
                {
                    b.HasOne("Models.Models.Person", "User")
                        .WithMany("skills")
                        .HasForeignKey("Userguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.TAapplication", b =>
                {
                    b.HasOne("Models.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Studentguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.TArequest", "Tarequest")
                        .WithMany()
                        .HasForeignKey("Tarequestguid");

                    b.Navigation("Student");

                    b.Navigation("Tarequest");
                });

            modelBuilder.Entity("Models.Models.TArequest", b =>
                {
                    b.HasOne("Models.Models.Professor", "Professor")
                        .WithMany("TArequests")
                        .HasForeignKey("Professorguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.HasOne("Models.Models.Company", null)
                        .WithMany("CompanyMembers")
                        .HasForeignKey("Companyguid");

                    b.HasOne("Models.Models.Faculty", "Faculty")
                        .WithMany("Users")
                        .HasForeignKey("Facultyguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", null)
                        .WithMany("Following")
                        .HasForeignKey("Userguid");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Models.Models.WorkField", b =>
                {
                    b.HasOne("Models.Models.Project", null)
                        .WithMany("WorkFields")
                        .HasForeignKey("Projectguid");

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("workFields")
                        .HasForeignKey("Userguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("Models.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ProjectParticipantsguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("projectsguid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Models.EducationInstitute", b =>
                {
                    b.Navigation("EducationRecords");
                });

            modelBuilder.Entity("Models.Models.Faculty", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Models.Project", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Filess");

                    b.Navigation("Notifications");

                    b.Navigation("ProjectManagers");

                    b.Navigation("WorkFields");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.Navigation("Following");

                    b.Navigation("SavedProjects");

                    b.Navigation("contactInfos");

                    b.Navigation("feedbacks");

                    b.Navigation("news");

                    b.Navigation("notifications");

                    b.Navigation("workFields");
                });

            modelBuilder.Entity("Models.Models.Company", b =>
                {
                    b.Navigation("CompanyMembers");
                });

            modelBuilder.Entity("Models.Models.Person", b =>
                {
                    b.Navigation("EducationRecords");

                    b.Navigation("coApplications");

                    b.Navigation("skills");
                });

            modelBuilder.Entity("Models.Models.Professor", b =>
                {
                    b.Navigation("TArequests");
                });
#pragma warning restore 612, 618
        }
    }
}
