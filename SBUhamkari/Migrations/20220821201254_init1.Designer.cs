// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace SBUhamkari.Migrations
{
    [DbContext(typeof(HamkariContext))]
    [Migration("20220821201254_init1")]
    partial class init1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Models.Models.CoAnnouncement", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Creatorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Creatorid");

                    b.ToTable("CoAnnouncements");
                });

            modelBuilder.Entity("Models.Models.CoApplication", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Applicantid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CV")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("CoAnnouncementid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Applicantid");

                    b.HasIndex("CoAnnouncementid");

                    b.ToTable("CoApplications");
                });

            modelBuilder.Entity("Models.Models.ContactInfo", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("Models.Models.EducationInstitute", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("EducationInstitutes");

                    b.HasData(
                        new
                        {
                            id = new Guid("389d1aba-1f44-4154-bc36-92c877418b80"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3091),
                            Name = "دانشگاه شهید بهشتی"
                        },
                        new
                        {
                            id = new Guid("158b444c-61db-4c49-9986-151695f1dc01"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3155),
                            Name = "دانشگاه تهران"
                        },
                        new
                        {
                            id = new Guid("3cebf69c-e28c-4ea5-a140-91e93ed27b8f"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3161),
                            Name = "دانشگاه صنعتی امیرکبیر"
                        },
                        new
                        {
                            id = new Guid("a4f9d2ee-5812-42e5-9fcc-1f40ac85c0bc"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3166),
                            Name = "دانشگاه علم و صنعت"
                        },
                        new
                        {
                            id = new Guid("cb8c6661-2d59-4c3b-bdbf-f9aec7c2d26e"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3194),
                            Name = "دانشگاه صنعتی صنعتی شریف"
                        });
                });

            modelBuilder.Entity("Models.Models.EducationRecord", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationInstituteid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EducationState")
                        .HasColumnType("int");

                    b.Property<Guid?>("Personid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("EducationInstituteid");

                    b.HasIndex("Personid");

                    b.ToTable("EducationRecords");
                });

            modelBuilder.Entity("Models.Models.Faculty", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            id = new Guid("2b08f140-bcdc-42b8-9fcb-7ba399f75e44"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3275),
                            Name = "دانشکده برق و کامپیوتر"
                        },
                        new
                        {
                            id = new Guid("9cce9244-f42e-4751-b563-a4e37ea52161"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3288),
                            Name = "دانشکده حقوق"
                        },
                        new
                        {
                            id = new Guid("5b9315a2-c6da-4563-8686-3bc7bded8c01"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3293),
                            Name = "دانشکده رواشناسی و علوم تربیتی"
                        },
                        new
                        {
                            id = new Guid("e7c3b96e-8519-41da-8378-078730c32fa9"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3297),
                            Name = "دانشکده معماری"
                        },
                        new
                        {
                            id = new Guid("643fde80-5db4-49f2-97b3-f8ea68dc1439"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3302),
                            Name = "دانشکده علوم پایه"
                        });
                });

            modelBuilder.Entity("Models.Models.Feedback", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Models.Models.Following", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FollowedID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Followerid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Followerid");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("Models.Models.News", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Models.Models.Notification", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotifText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifTittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Recieverid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Senderid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Recieverid");

                    b.HasIndex("Senderid");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Models.Models.ParticipationInvitation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvitationState")
                        .HasColumnType("int");

                    b.Property<Guid>("InvitedUserid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectManagerid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("InvitedUserid");

                    b.HasIndex("ProjectManagerid");

                    b.ToTable("ParticipationInvitations");
                });

            modelBuilder.Entity("Models.Models.PersonWorkField", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkfieldID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("PersonID");

                    b.HasIndex("WorkfieldID");

                    b.ToTable("PersonWorkFields");
                });

            modelBuilder.Entity("Models.Models.Project", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectExplain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectState")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Models.Models.ProjectFile", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("Models.Models.ProjectManager", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("ProjectManagers");
                });

            modelBuilder.Entity("Models.Models.ProjectNews", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.ToTable("ProjectNews");
                });

            modelBuilder.Entity("Models.Models.ProjectParticapation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("ProjectParticapations");
                });

            modelBuilder.Entity("Models.Models.ProjectWorkField", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkfieldID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("projectRelatedforeignKey")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("ProjectID");

                    b.HasIndex("WorkfieldID");

                    b.HasIndex("projectRelatedforeignKey");

                    b.ToTable("ProjectWorkFields");
                });

            modelBuilder.Entity("Models.Models.Role", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = new Guid("93e857a3-e721-4d2d-a078-421e70f07481"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3368),
                            Name = "Admin"
                        },
                        new
                        {
                            id = new Guid("694c3813-8507-45cb-b2a4-13caff16c759"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3381),
                            Name = "Student"
                        },
                        new
                        {
                            id = new Guid("ca84ef32-4a94-493f-b67c-af9f87b8f169"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3391),
                            Name = "Professor"
                        },
                        new
                        {
                            id = new Guid("35da13d9-0d4e-44bf-ab72-0577676bea91"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3396),
                            Name = "Company"
                        });
                });

            modelBuilder.Entity("Models.Models.SavedProject", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("SavedProjects");
                });

            modelBuilder.Entity("Models.Models.Skill", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Personid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<string>("SkillTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Personid");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Models.Models.TAapplication", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Resume")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("Studentid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Tarequestid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Studentid");

                    b.HasIndex("Tarequestid");

                    b.ToTable("TAapplications");
                });

            modelBuilder.Entity("Models.Models.TArequest", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Professorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Professorid");

                    b.ToTable("TArequests");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Facultyid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Roleid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("Facultyid");

                    b.HasIndex("Roleid");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Models.Models.WorkField", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("WorkFields");

                    b.HasData(
                        new
                        {
                            id = new Guid("6d3ec4fb-720e-4894-b7c8-7939148698a8"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3456),
                            Name = "هوش مصنوعی"
                        },
                        new
                        {
                            id = new Guid("93796950-4678-420e-888f-85d392f78fb3"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3467),
                            Name = "نرم افزار"
                        },
                        new
                        {
                            id = new Guid("0a640c6b-dd50-41ed-af76-ce12b93f4924"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3472),
                            Name = "سخت افزار"
                        },
                        new
                        {
                            id = new Guid("fe2d7cb9-abf1-439c-968f-c41c4f77dda7"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3476),
                            Name = "علوم داده"
                        },
                        new
                        {
                            id = new Guid("06892e90-0b52-4602-a345-21b6c5cff37b"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3481),
                            Name = "شبکه"
                        },
                        new
                        {
                            id = new Guid("b219811d-337d-48ff-8913-5bb08eade936"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3487),
                            Name = "هوش مصنوعی"
                        },
                        new
                        {
                            id = new Guid("fe4acd48-b82f-4fc1-a0d8-13d09a4126d7"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3496),
                            Name = "شبکه‌های پیچیده"
                        },
                        new
                        {
                            id = new Guid("6a7d441a-5dce-4794-984e-96f086408dbf"),
                            CreateTime = new DateTime(2022, 8, 22, 0, 42, 53, 633, DateTimeKind.Local).AddTicks(3501),
                            Name = "فناوری اطلاعات"
                        });
                });

            modelBuilder.Entity("Models.Models.Company", b =>
                {
                    b.HasBaseType("Models.Models.User");

                    b.Property<string>("CompanyIDnumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyIDnumber")
                        .IsUnique()
                        .HasFilter("[CompanyIDnumber] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Models.Models.Person", b =>
                {
                    b.HasBaseType("Models.Models.User");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("CV")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NationalIdNum")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasIndex("NationalIdNum")
                        .IsUnique()
                        .HasFilter("[NationalIdNum] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Models.Models.Professor", b =>
                {
                    b.HasBaseType("Models.Models.Person");

                    b.Property<long>("PersonnelID")
                        .HasMaxLength(8)
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("Models.Models.Student", b =>
                {
                    b.HasBaseType("Models.Models.Person");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasIndex("StudentID")
                        .IsUnique()
                        .HasFilter("[StudentID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Models.Models.CoAnnouncement", b =>
                {
                    b.HasOne("Models.Models.ProjectManager", "Creator")
                        .WithMany("CoAnnouncements")
                        .HasForeignKey("Creatorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Models.Models.CoApplication", b =>
                {
                    b.HasOne("Models.Models.Person", "Applicant")
                        .WithMany("coApplications")
                        .HasForeignKey("Applicantid");

                    b.HasOne("Models.Models.CoAnnouncement", "CoAnnouncement")
                        .WithMany("CoApplications")
                        .HasForeignKey("CoAnnouncementid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("CoAnnouncement");
                });

            modelBuilder.Entity("Models.Models.ContactInfo", b =>
                {
                    b.HasOne("Models.Models.User", "User")
                        .WithMany("contactInfos")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.EducationRecord", b =>
                {
                    b.HasOne("Models.Models.EducationInstitute", "EducationInstitute")
                        .WithMany("EducationRecords")
                        .HasForeignKey("EducationInstituteid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Person", "Person")
                        .WithMany("EducationRecords")
                        .HasForeignKey("Personid");

                    b.Navigation("EducationInstitute");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Models.Models.Feedback", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("feedbacks")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Following", b =>
                {
                    b.HasOne("Models.Models.User", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("Followerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Models.Models.News", b =>
                {
                    b.HasOne("Models.Models.User", "User")
                        .WithMany("news")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Notification", b =>
                {
                    b.HasOne("Models.Models.User", "Reciever")
                        .WithMany("notifications")
                        .HasForeignKey("Recieverid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Project", "Sender")
                        .WithMany("Notifications")
                        .HasForeignKey("Senderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Models.Models.ParticipationInvitation", b =>
                {
                    b.HasOne("Models.Models.User", "InvitedUser")
                        .WithMany("ParticipationInvitations")
                        .HasForeignKey("InvitedUserid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Models.ProjectManager", "ProjectManager")
                        .WithMany("ParticipationInvitations")
                        .HasForeignKey("ProjectManagerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedUser");

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("Models.Models.PersonWorkField", b =>
                {
                    b.HasOne("Models.Models.WorkField", "WorkField")
                        .WithMany("PersonWorkFields")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Person", "Person")
                        .WithMany("PersonWorkFields")
                        .HasForeignKey("WorkfieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("WorkField");
                });

            modelBuilder.Entity("Models.Models.ProjectFile", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("Filess")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Models.Models.ProjectManager", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectManagers")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.ProjectNews", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectNews")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Models.Models.ProjectParticapation", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectParticipants")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("ProjectParticapations")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.ProjectWorkField", b =>
                {
                    b.HasOne("Models.Models.WorkField", "WorkField")
                        .WithMany("ProjectWorkFields")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Project", null)
                        .WithMany("ProjectWorkFields")
                        .HasForeignKey("WorkfieldID");

                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("projectRelatedforeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("WorkField");
                });

            modelBuilder.Entity("Models.Models.SavedProject", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("SavedProjects")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Skill", b =>
                {
                    b.HasOne("Models.Models.Person", "Person")
                        .WithMany("skills")
                        .HasForeignKey("Personid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Models.Models.TAapplication", b =>
                {
                    b.HasOne("Models.Models.Student", "Student")
                        .WithMany("TaApplications")
                        .HasForeignKey("Studentid");

                    b.HasOne("Models.Models.TArequest", "Tarequest")
                        .WithMany("TAapplications")
                        .HasForeignKey("Tarequestid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Tarequest");
                });

            modelBuilder.Entity("Models.Models.TArequest", b =>
                {
                    b.HasOne("Models.Models.Professor", "Professor")
                        .WithMany("TArequests")
                        .HasForeignKey("Professorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.HasOne("Models.Models.Faculty", "Faculty")
                        .WithMany("Users")
                        .HasForeignKey("Facultyid");

                    b.HasOne("Models.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Models.Models.CoAnnouncement", b =>
                {
                    b.Navigation("CoApplications");
                });

            modelBuilder.Entity("Models.Models.EducationInstitute", b =>
                {
                    b.Navigation("EducationRecords");
                });

            modelBuilder.Entity("Models.Models.Faculty", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Models.Project", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Filess");

                    b.Navigation("Notifications");

                    b.Navigation("ProjectManagers");

                    b.Navigation("ProjectNews");

                    b.Navigation("ProjectParticipants");

                    b.Navigation("ProjectWorkFields");
                });

            modelBuilder.Entity("Models.Models.ProjectManager", b =>
                {
                    b.Navigation("CoAnnouncements");

                    b.Navigation("ParticipationInvitations");
                });

            modelBuilder.Entity("Models.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Models.TArequest", b =>
                {
                    b.Navigation("TAapplications");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.Navigation("Following");

                    b.Navigation("ParticipationInvitations");

                    b.Navigation("ProjectParticapations");

                    b.Navigation("SavedProjects");

                    b.Navigation("contactInfos");

                    b.Navigation("feedbacks");

                    b.Navigation("news");

                    b.Navigation("notifications");
                });

            modelBuilder.Entity("Models.Models.WorkField", b =>
                {
                    b.Navigation("PersonWorkFields");

                    b.Navigation("ProjectWorkFields");
                });

            modelBuilder.Entity("Models.Models.Person", b =>
                {
                    b.Navigation("EducationRecords");

                    b.Navigation("PersonWorkFields");

                    b.Navigation("coApplications");

                    b.Navigation("skills");
                });

            modelBuilder.Entity("Models.Models.Professor", b =>
                {
                    b.Navigation("TArequests");
                });

            modelBuilder.Entity("Models.Models.Student", b =>
                {
                    b.Navigation("TaApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
