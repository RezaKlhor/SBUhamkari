// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace SBUhamkari.Migrations
{
    [DbContext(typeof(HamkariContext))]
    [Migration("20220807082736_init4")]
    partial class init4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Models.Models.CoAnnouncement", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Creatorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Creatorid");

                    b.ToTable("CoAnnouncements");
                });

            modelBuilder.Entity("Models.Models.CoApplication", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Applicantid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CV")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("CoAnnouncementid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Applicantid");

                    b.HasIndex("CoAnnouncementid");

                    b.ToTable("CoApplications");
                });

            modelBuilder.Entity("Models.Models.ContactInfo", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("Models.Models.EducationInstitute", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("EducationInstitutes");

                    b.HasData(
                        new
                        {
                            id = new Guid("1546c36e-a9c4-497c-a0bd-e14297b30c7c"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(6766),
                            Name = "دانشگاه شهید بهشتی"
                        },
                        new
                        {
                            id = new Guid("38ec6373-848f-4837-9ec1-70d58da37345"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(6824),
                            Name = "دانشگاه تهران"
                        },
                        new
                        {
                            id = new Guid("eacebe86-af89-4a48-997d-57e8ce08300a"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(6830),
                            Name = "دانشگاه صنعتی امیرکبیر"
                        },
                        new
                        {
                            id = new Guid("f2c08d38-7aa9-4ace-b515-f75a8e51b93b"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(6834),
                            Name = "دانشگاه علم و صنعت"
                        },
                        new
                        {
                            id = new Guid("afb116d2-be7e-4a2d-b72d-7e6e1641b2e7"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(6906),
                            Name = "دانشگاه صنعتی صنعتی شریف"
                        });
                });

            modelBuilder.Entity("Models.Models.EducationRecord", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationInstituteid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EducationState")
                        .HasColumnType("int");

                    b.Property<Guid?>("Personid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("EducationInstituteid");

                    b.HasIndex("Personid");

                    b.ToTable("EducationRecords");
                });

            modelBuilder.Entity("Models.Models.Faculty", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            id = new Guid("0281430f-303f-4d5e-95a7-d77a17d28dec"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7038),
                            Name = "دانشکده برق و کامپیوتر"
                        },
                        new
                        {
                            id = new Guid("9ab9d2bd-ac0d-42e9-82e7-d81c858e85bf"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7075),
                            Name = "دانشکده حقوق"
                        },
                        new
                        {
                            id = new Guid("d49f5ee0-f3f5-410d-a222-4d9055b68fb5"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7080),
                            Name = "دانشکده رواشناسی و علوم تربیتی"
                        },
                        new
                        {
                            id = new Guid("3685fe87-b4a1-450c-b852-e592448a3abe"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7084),
                            Name = "دانشکده معماری"
                        },
                        new
                        {
                            id = new Guid("2ebbd035-073b-40c2-8a3f-5e9c700ffe31"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7088),
                            Name = "دانشکده علوم پایه"
                        });
                });

            modelBuilder.Entity("Models.Models.Feedback", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Models.Models.Following", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FollowedID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Followerid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Followerid");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("Models.Models.News", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Models.Models.Notification", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotifText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifTittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Recieverid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Senderid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Recieverid");

                    b.HasIndex("Senderid");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Models.Models.ParticipationInvitation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvitationState")
                        .HasColumnType("int");

                    b.Property<Guid>("InvitedUserid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectManagerid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("InvitedUserid");

                    b.HasIndex("ProjectManagerid");

                    b.ToTable("ParticipationInvitations");
                });

            modelBuilder.Entity("Models.Models.PersonWorkField", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkfieldID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("PersonID");

                    b.HasIndex("WorkfieldID");

                    b.ToTable("PersonWorkFields");
                });

            modelBuilder.Entity("Models.Models.Project", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectExplain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectState")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Models.Models.ProjectFile", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("Models.Models.ProjectManager", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("ProjectManagers");
                });

            modelBuilder.Entity("Models.Models.ProjectNews", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.ToTable("ProjectNews");
                });

            modelBuilder.Entity("Models.Models.ProjectParticapation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("ProjectParticapations");
                });

            modelBuilder.Entity("Models.Models.ProjectWorkField", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkfieldID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("ProjectID");

                    b.HasIndex("WorkfieldID");

                    b.ToTable("ProjectWorkFields");
                });

            modelBuilder.Entity("Models.Models.Role", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = new Guid("bf126f7d-1dc2-436c-9988-15a27b6eb67e"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7147),
                            Name = "Admin"
                        },
                        new
                        {
                            id = new Guid("e0026ef5-1c3d-4640-809b-1304bec775df"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7158),
                            Name = "Student"
                        },
                        new
                        {
                            id = new Guid("854bc195-cd52-42ae-a15e-eeea01250be9"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7162),
                            Name = "Professor"
                        },
                        new
                        {
                            id = new Guid("18c4d169-5492-4ef3-8eea-c7ce948551b8"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7166),
                            Name = "Company"
                        });
                });

            modelBuilder.Entity("Models.Models.SavedProject", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("SavedProjects");
                });

            modelBuilder.Entity("Models.Models.Skill", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Personid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<string>("SkillTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Personid");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Models.Models.TAapplication", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Resume")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("Studentid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Tarequestid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Studentid");

                    b.HasIndex("Tarequestid");

                    b.ToTable("TAapplications");
                });

            modelBuilder.Entity("Models.Models.TArequest", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Professorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Professorid");

                    b.ToTable("TArequests");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("Companyid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Facultyid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Roleid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("Companyid");

                    b.HasIndex("Facultyid");

                    b.HasIndex("Roleid");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Models.Models.WorkField", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("WorkFields");

                    b.HasData(
                        new
                        {
                            id = new Guid("353d070b-732b-4cb8-9748-d58c37db5a98"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7218),
                            Name = "هوش مصنوعی"
                        },
                        new
                        {
                            id = new Guid("79c81975-3041-47b7-8016-bdceddd80390"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7228),
                            Name = "نرم افزار"
                        },
                        new
                        {
                            id = new Guid("f9a85f1b-5017-4993-9921-4ac290135fe9"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7232),
                            Name = "سخت افزار"
                        },
                        new
                        {
                            id = new Guid("9509b1d3-fd97-4d17-940c-3400b000106e"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7236),
                            Name = "علوم داده"
                        },
                        new
                        {
                            id = new Guid("4298a2ca-d957-4062-bcd5-dd30ee0d55ab"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7240),
                            Name = "شبکه"
                        },
                        new
                        {
                            id = new Guid("b8e1bde9-1f9f-4599-861d-929e7cae03a2"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7246),
                            Name = "هوش مصنوعی"
                        },
                        new
                        {
                            id = new Guid("70261bda-ac5c-4f15-915e-3ca51de8530d"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7250),
                            Name = "شبکه‌های پیچیده"
                        },
                        new
                        {
                            id = new Guid("11abe1c3-807b-49bb-8587-6a79ed6e57ba"),
                            CreateTime = new DateTime(2022, 8, 7, 12, 57, 35, 758, DateTimeKind.Local).AddTicks(7254),
                            Name = "فناوری اطلاعات"
                        });
                });

            modelBuilder.Entity("Models.Models.Company", b =>
                {
                    b.HasBaseType("Models.Models.User");

                    b.Property<long>("CompanyIDnumber")
                        .HasMaxLength(10)
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyIDnumber")
                        .IsUnique()
                        .HasFilter("[CompanyIDnumber] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Models.Models.Person", b =>
                {
                    b.HasBaseType("Models.Models.User");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("CV")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("NationalIdNum")
                        .HasMaxLength(10)
                        .HasColumnType("bigint");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasIndex("NationalIdNum")
                        .IsUnique()
                        .HasFilter("[NationalIdNum] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Models.Models.Professor", b =>
                {
                    b.HasBaseType("Models.Models.Person");

                    b.Property<long>("PersonnelID")
                        .HasMaxLength(8)
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("Models.Models.Student", b =>
                {
                    b.HasBaseType("Models.Models.Person");

                    b.Property<long>("StudentID")
                        .HasMaxLength(8)
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Models.Models.CoAnnouncement", b =>
                {
                    b.HasOne("Models.Models.ProjectManager", "Creator")
                        .WithMany("CoAnnouncements")
                        .HasForeignKey("Creatorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Models.Models.CoApplication", b =>
                {
                    b.HasOne("Models.Models.Person", "Applicant")
                        .WithMany("coApplications")
                        .HasForeignKey("Applicantid");

                    b.HasOne("Models.Models.CoAnnouncement", "CoAnnouncement")
                        .WithMany("CoApplications")
                        .HasForeignKey("CoAnnouncementid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("CoAnnouncement");
                });

            modelBuilder.Entity("Models.Models.ContactInfo", b =>
                {
                    b.HasOne("Models.Models.User", "User")
                        .WithMany("contactInfos")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.EducationRecord", b =>
                {
                    b.HasOne("Models.Models.EducationInstitute", "EducationInstitute")
                        .WithMany("EducationRecords")
                        .HasForeignKey("EducationInstituteid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Person", "Person")
                        .WithMany("EducationRecords")
                        .HasForeignKey("Personid");

                    b.Navigation("EducationInstitute");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Models.Models.Feedback", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("feedbacks")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Following", b =>
                {
                    b.HasOne("Models.Models.User", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("Followerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Models.Models.News", b =>
                {
                    b.HasOne("Models.Models.User", "User")
                        .WithMany("news")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Notification", b =>
                {
                    b.HasOne("Models.Models.User", "Reciever")
                        .WithMany("notifications")
                        .HasForeignKey("Recieverid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Project", "Sender")
                        .WithMany("Notifications")
                        .HasForeignKey("Senderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Models.Models.ParticipationInvitation", b =>
                {
                    b.HasOne("Models.Models.User", "InvitedUser")
                        .WithMany("ParticipationInvitations")
                        .HasForeignKey("InvitedUserid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Models.ProjectManager", "ProjectManager")
                        .WithMany("ParticipationInvitations")
                        .HasForeignKey("ProjectManagerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedUser");

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("Models.Models.PersonWorkField", b =>
                {
                    b.HasOne("Models.Models.WorkField", "WorkField")
                        .WithMany("PersonWorkFields")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Person", "Person")
                        .WithMany("PersonWorkFields")
                        .HasForeignKey("WorkfieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("WorkField");
                });

            modelBuilder.Entity("Models.Models.ProjectFile", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("Filess")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Models.Models.ProjectManager", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectManagers")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.ProjectNews", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectNews")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Models.Models.ProjectParticapation", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectParticipants")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("ProjectParticapations")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.ProjectWorkField", b =>
                {
                    b.HasOne("Models.Models.WorkField", "WorkField")
                        .WithMany("ProjectWorkFields")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectWorkFields")
                        .HasForeignKey("WorkfieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("WorkField");
                });

            modelBuilder.Entity("Models.Models.SavedProject", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("SavedProjects")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Skill", b =>
                {
                    b.HasOne("Models.Models.Person", "Person")
                        .WithMany("skills")
                        .HasForeignKey("Personid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Models.Models.TAapplication", b =>
                {
                    b.HasOne("Models.Models.Student", "Student")
                        .WithMany("TaApplications")
                        .HasForeignKey("Studentid");

                    b.HasOne("Models.Models.TArequest", "Tarequest")
                        .WithMany("TAapplications")
                        .HasForeignKey("Tarequestid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Tarequest");
                });

            modelBuilder.Entity("Models.Models.TArequest", b =>
                {
                    b.HasOne("Models.Models.Professor", "Professor")
                        .WithMany("TArequests")
                        .HasForeignKey("Professorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.HasOne("Models.Models.Company", null)
                        .WithMany("CompanyMembers")
                        .HasForeignKey("Companyid");

                    b.HasOne("Models.Models.Faculty", "Faculty")
                        .WithMany("Users")
                        .HasForeignKey("Facultyid");

                    b.HasOne("Models.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Models.Models.CoAnnouncement", b =>
                {
                    b.Navigation("CoApplications");
                });

            modelBuilder.Entity("Models.Models.EducationInstitute", b =>
                {
                    b.Navigation("EducationRecords");
                });

            modelBuilder.Entity("Models.Models.Faculty", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Models.Project", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Filess");

                    b.Navigation("Notifications");

                    b.Navigation("ProjectManagers");

                    b.Navigation("ProjectNews");

                    b.Navigation("ProjectParticipants");

                    b.Navigation("ProjectWorkFields");
                });

            modelBuilder.Entity("Models.Models.ProjectManager", b =>
                {
                    b.Navigation("CoAnnouncements");

                    b.Navigation("ParticipationInvitations");
                });

            modelBuilder.Entity("Models.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Models.TArequest", b =>
                {
                    b.Navigation("TAapplications");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.Navigation("Following");

                    b.Navigation("ParticipationInvitations");

                    b.Navigation("ProjectParticapations");

                    b.Navigation("SavedProjects");

                    b.Navigation("contactInfos");

                    b.Navigation("feedbacks");

                    b.Navigation("news");

                    b.Navigation("notifications");
                });

            modelBuilder.Entity("Models.Models.WorkField", b =>
                {
                    b.Navigation("PersonWorkFields");

                    b.Navigation("ProjectWorkFields");
                });

            modelBuilder.Entity("Models.Models.Company", b =>
                {
                    b.Navigation("CompanyMembers");
                });

            modelBuilder.Entity("Models.Models.Person", b =>
                {
                    b.Navigation("EducationRecords");

                    b.Navigation("PersonWorkFields");

                    b.Navigation("coApplications");

                    b.Navigation("skills");
                });

            modelBuilder.Entity("Models.Models.Professor", b =>
                {
                    b.Navigation("TArequests");
                });

            modelBuilder.Entity("Models.Models.Student", b =>
                {
                    b.Navigation("TaApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
