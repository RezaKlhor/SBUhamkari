// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace SBUhamkari.Migrations
{
    [DbContext(typeof(HamkariContext))]
    [Migration("20220812113034_init6")]
    partial class init6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Models.Models.CoAnnouncement", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Creatorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Creatorid");

                    b.ToTable("CoAnnouncements");
                });

            modelBuilder.Entity("Models.Models.CoApplication", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Applicantid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CV")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("CoAnnouncementid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Applicantid");

                    b.HasIndex("CoAnnouncementid");

                    b.ToTable("CoApplications");
                });

            modelBuilder.Entity("Models.Models.ContactInfo", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityState")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("Models.Models.EducationInstitute", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("EducationInstitutes");

                    b.HasData(
                        new
                        {
                            id = new Guid("95d1da22-6f35-4ab7-857a-c8d7691a0788"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6107),
                            Name = "دانشگاه شهید بهشتی"
                        },
                        new
                        {
                            id = new Guid("516a4f42-4236-4786-9987-47f937addad5"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6184),
                            Name = "دانشگاه تهران"
                        },
                        new
                        {
                            id = new Guid("e69aa315-8c19-4dc0-add1-8cf3700a2f96"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6189),
                            Name = "دانشگاه صنعتی امیرکبیر"
                        },
                        new
                        {
                            id = new Guid("d325866c-ec73-439e-8d66-c1f49ea6f47a"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6194),
                            Name = "دانشگاه علم و صنعت"
                        },
                        new
                        {
                            id = new Guid("8ed765ad-19a0-46f9-85a8-77b5e4de9ace"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6198),
                            Name = "دانشگاه صنعتی صنعتی شریف"
                        });
                });

            modelBuilder.Entity("Models.Models.EducationRecord", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EducationInstituteid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EducationState")
                        .HasColumnType("int");

                    b.Property<Guid?>("Personid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("EducationInstituteid");

                    b.HasIndex("Personid");

                    b.ToTable("EducationRecords");
                });

            modelBuilder.Entity("Models.Models.Faculty", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            id = new Guid("c76004c6-c43b-4fe1-b9fb-54ba43bd60fa"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6310),
                            Name = "دانشکده برق و کامپیوتر"
                        },
                        new
                        {
                            id = new Guid("53cdfb5c-30ee-4724-9ff4-1757fddb1a41"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6334),
                            Name = "دانشکده حقوق"
                        },
                        new
                        {
                            id = new Guid("2f312dc7-ebeb-44d5-9945-676216e1e2ba"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6340),
                            Name = "دانشکده رواشناسی و علوم تربیتی"
                        },
                        new
                        {
                            id = new Guid("d08af042-b10d-4fdf-9102-4c0c0128894c"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6344),
                            Name = "دانشکده معماری"
                        },
                        new
                        {
                            id = new Guid("43d4753c-9d86-4902-a793-4ca73e097f8e"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6348),
                            Name = "دانشکده علوم پایه"
                        });
                });

            modelBuilder.Entity("Models.Models.Feedback", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Models.Models.Following", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FollowedID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Followerid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Followerid");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("Models.Models.News", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Models.Models.Notification", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotifText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotifTittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecieverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Recieverid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Senderid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Recieverid");

                    b.HasIndex("Senderid");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Models.Models.ParticipationInvitation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvitationState")
                        .HasColumnType("int");

                    b.Property<Guid>("InvitedUserid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectManagerid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("InvitedUserid");

                    b.HasIndex("ProjectManagerid");

                    b.ToTable("ParticipationInvitations");
                });

            modelBuilder.Entity("Models.Models.PersonWorkField", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkfieldID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("PersonID");

                    b.HasIndex("WorkfieldID");

                    b.ToTable("PersonWorkFields");
                });

            modelBuilder.Entity("Models.Models.Project", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectExplain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectState")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Models.Models.ProjectFile", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("Models.Models.ProjectManager", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("ProjectManagers");
                });

            modelBuilder.Entity("Models.Models.ProjectNews", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.ToTable("ProjectNews");
                });

            modelBuilder.Entity("Models.Models.ProjectParticapation", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("ProjectParticapations");
                });

            modelBuilder.Entity("Models.Models.ProjectWorkField", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkfieldID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("ProjectID");

                    b.HasIndex("WorkfieldID");

                    b.ToTable("ProjectWorkFields");
                });

            modelBuilder.Entity("Models.Models.Role", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            id = new Guid("ab0ade69-d6bd-4289-8b8e-b642a01a7a3c"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6427),
                            Name = "Admin"
                        },
                        new
                        {
                            id = new Guid("37740af8-0ab1-410c-8b6e-afc51586d1b0"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6440),
                            Name = "Student"
                        },
                        new
                        {
                            id = new Guid("ca338388-3291-408c-ac7c-f685645ee768"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6445),
                            Name = "Professor"
                        },
                        new
                        {
                            id = new Guid("ffee0957-787f-437b-998e-d4748243b924"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6455),
                            Name = "Company"
                        });
                });

            modelBuilder.Entity("Models.Models.SavedProject", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Projectid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Userid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.HasIndex("Userid");

                    b.ToTable("SavedProjects");
                });

            modelBuilder.Entity("Models.Models.Skill", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Personid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<string>("SkillTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Personid");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Models.Models.TAapplication", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Resume")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("Studentid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Tarequestid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Studentid");

                    b.HasIndex("Tarequestid");

                    b.ToTable("TAapplications");
                });

            modelBuilder.Entity("Models.Models.TArequest", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Professorid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Professorid");

                    b.ToTable("TArequests");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Facultyid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Roleid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("Facultyid");

                    b.HasIndex("Roleid");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Models.Models.WorkField", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("WorkFields");

                    b.HasData(
                        new
                        {
                            id = new Guid("8a969146-87a9-4c9f-8ef8-1958db4a0ac3"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6511),
                            Name = "هوش مصنوعی"
                        },
                        new
                        {
                            id = new Guid("3907e308-fa0c-4d66-a08f-515d9ab79b56"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6554),
                            Name = "نرم افزار"
                        },
                        new
                        {
                            id = new Guid("00a450fd-9d57-446e-a661-2e77aa5f2cf9"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6559),
                            Name = "سخت افزار"
                        },
                        new
                        {
                            id = new Guid("9ecb6dbd-8faf-4260-a07c-8eb875d693b4"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6676),
                            Name = "علوم داده"
                        },
                        new
                        {
                            id = new Guid("8422f4e8-9047-4412-9f58-6fc7d01d10c9"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6683),
                            Name = "شبکه"
                        },
                        new
                        {
                            id = new Guid("20a3d17e-5e6e-4e73-bc67-157b10c3b9d4"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6691),
                            Name = "هوش مصنوعی"
                        },
                        new
                        {
                            id = new Guid("94f6e85b-6ade-4d42-83d3-5299651d4846"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6696),
                            Name = "شبکه‌های پیچیده"
                        },
                        new
                        {
                            id = new Guid("bab036dc-5f9e-4734-81ec-b469e1fba53f"),
                            CreateTime = new DateTime(2022, 8, 12, 16, 0, 33, 341, DateTimeKind.Local).AddTicks(6706),
                            Name = "فناوری اطلاعات"
                        });
                });

            modelBuilder.Entity("Models.Models.Company", b =>
                {
                    b.HasBaseType("Models.Models.User");

                    b.Property<long>("CompanyIDnumber")
                        .HasMaxLength(10)
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CompanyIDnumber")
                        .IsUnique()
                        .HasFilter("[CompanyIDnumber] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Models.Models.Person", b =>
                {
                    b.HasBaseType("Models.Models.User");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("CV")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("NationalIdNum")
                        .HasMaxLength(10)
                        .HasColumnType("bigint");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.HasIndex("NationalIdNum")
                        .IsUnique()
                        .HasFilter("[NationalIdNum] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Models.Models.Professor", b =>
                {
                    b.HasBaseType("Models.Models.Person");

                    b.Property<long>("PersonnelID")
                        .HasMaxLength(8)
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("Models.Models.Student", b =>
                {
                    b.HasBaseType("Models.Models.Person");

                    b.Property<long>("StudentID")
                        .HasMaxLength(8)
                        .HasColumnType("bigint");

                    b.HasIndex("StudentID")
                        .IsUnique()
                        .HasFilter("[StudentID] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Models.Models.CoAnnouncement", b =>
                {
                    b.HasOne("Models.Models.ProjectManager", "Creator")
                        .WithMany("CoAnnouncements")
                        .HasForeignKey("Creatorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Models.Models.CoApplication", b =>
                {
                    b.HasOne("Models.Models.Person", "Applicant")
                        .WithMany("coApplications")
                        .HasForeignKey("Applicantid");

                    b.HasOne("Models.Models.CoAnnouncement", "CoAnnouncement")
                        .WithMany("CoApplications")
                        .HasForeignKey("CoAnnouncementid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("CoAnnouncement");
                });

            modelBuilder.Entity("Models.Models.ContactInfo", b =>
                {
                    b.HasOne("Models.Models.User", "User")
                        .WithMany("contactInfos")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.EducationRecord", b =>
                {
                    b.HasOne("Models.Models.EducationInstitute", "EducationInstitute")
                        .WithMany("EducationRecords")
                        .HasForeignKey("EducationInstituteid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Person", "Person")
                        .WithMany("EducationRecords")
                        .HasForeignKey("Personid");

                    b.Navigation("EducationInstitute");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Models.Models.Feedback", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("feedbacks")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Following", b =>
                {
                    b.HasOne("Models.Models.User", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("Followerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Models.Models.News", b =>
                {
                    b.HasOne("Models.Models.User", "User")
                        .WithMany("news")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Notification", b =>
                {
                    b.HasOne("Models.Models.User", "Reciever")
                        .WithMany("notifications")
                        .HasForeignKey("Recieverid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Project", "Sender")
                        .WithMany("Notifications")
                        .HasForeignKey("Senderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Models.Models.ParticipationInvitation", b =>
                {
                    b.HasOne("Models.Models.User", "InvitedUser")
                        .WithMany("ParticipationInvitations")
                        .HasForeignKey("InvitedUserid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Models.ProjectManager", "ProjectManager")
                        .WithMany("ParticipationInvitations")
                        .HasForeignKey("ProjectManagerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvitedUser");

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("Models.Models.PersonWorkField", b =>
                {
                    b.HasOne("Models.Models.WorkField", "WorkField")
                        .WithMany("PersonWorkFields")
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Person", "Person")
                        .WithMany("PersonWorkFields")
                        .HasForeignKey("WorkfieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("WorkField");
                });

            modelBuilder.Entity("Models.Models.ProjectFile", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("Filess")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Models.Models.ProjectManager", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectManagers")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.ProjectNews", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectNews")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Models.Models.ProjectParticapation", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectParticipants")
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("ProjectParticapations")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.ProjectWorkField", b =>
                {
                    b.HasOne("Models.Models.WorkField", "WorkField")
                        .WithMany("ProjectWorkFields")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany("ProjectWorkFields")
                        .HasForeignKey("WorkfieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("WorkField");
                });

            modelBuilder.Entity("Models.Models.SavedProject", b =>
                {
                    b.HasOne("Models.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.User", "User")
                        .WithMany("SavedProjects")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Models.Skill", b =>
                {
                    b.HasOne("Models.Models.Person", "Person")
                        .WithMany("skills")
                        .HasForeignKey("Personid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Models.Models.TAapplication", b =>
                {
                    b.HasOne("Models.Models.Student", "Student")
                        .WithMany("TaApplications")
                        .HasForeignKey("Studentid");

                    b.HasOne("Models.Models.TArequest", "Tarequest")
                        .WithMany("TAapplications")
                        .HasForeignKey("Tarequestid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Tarequest");
                });

            modelBuilder.Entity("Models.Models.TArequest", b =>
                {
                    b.HasOne("Models.Models.Professor", "Professor")
                        .WithMany("TArequests")
                        .HasForeignKey("Professorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.HasOne("Models.Models.Faculty", "Faculty")
                        .WithMany("Users")
                        .HasForeignKey("Facultyid");

                    b.HasOne("Models.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Models.Models.CoAnnouncement", b =>
                {
                    b.Navigation("CoApplications");
                });

            modelBuilder.Entity("Models.Models.EducationInstitute", b =>
                {
                    b.Navigation("EducationRecords");
                });

            modelBuilder.Entity("Models.Models.Faculty", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Models.Project", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Filess");

                    b.Navigation("Notifications");

                    b.Navigation("ProjectManagers");

                    b.Navigation("ProjectNews");

                    b.Navigation("ProjectParticipants");

                    b.Navigation("ProjectWorkFields");
                });

            modelBuilder.Entity("Models.Models.ProjectManager", b =>
                {
                    b.Navigation("CoAnnouncements");

                    b.Navigation("ParticipationInvitations");
                });

            modelBuilder.Entity("Models.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Models.Models.TArequest", b =>
                {
                    b.Navigation("TAapplications");
                });

            modelBuilder.Entity("Models.Models.User", b =>
                {
                    b.Navigation("Following");

                    b.Navigation("ParticipationInvitations");

                    b.Navigation("ProjectParticapations");

                    b.Navigation("SavedProjects");

                    b.Navigation("contactInfos");

                    b.Navigation("feedbacks");

                    b.Navigation("news");

                    b.Navigation("notifications");
                });

            modelBuilder.Entity("Models.Models.WorkField", b =>
                {
                    b.Navigation("PersonWorkFields");

                    b.Navigation("ProjectWorkFields");
                });

            modelBuilder.Entity("Models.Models.Person", b =>
                {
                    b.Navigation("EducationRecords");

                    b.Navigation("PersonWorkFields");

                    b.Navigation("coApplications");

                    b.Navigation("skills");
                });

            modelBuilder.Entity("Models.Models.Professor", b =>
                {
                    b.Navigation("TArequests");
                });

            modelBuilder.Entity("Models.Models.Student", b =>
                {
                    b.Navigation("TaApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
